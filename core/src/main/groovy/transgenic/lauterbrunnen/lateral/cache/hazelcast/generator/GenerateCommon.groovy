package transgenic.lauterbrunnen.lateral.cache.hazelcast.generator

/**
 * Created by stumeikle on 05/06/16.
 */
class GenerateCommon {

    private String outputPackage;
    private String basePath;
    private String generatedDomainPackage;
    private String diContext;
    private boolean sequencesUsed;

    public void setBasePath(String basePath) {
        this.basePath = basePath;
    }

    public void setDiContext(String diContext) {
        this.diContext = diContext;
    }

    public void setGeneratedDomainPackage(String generatedDomainPackage) {
        this.generatedDomainPackage = generatedDomainPackage;
    }

    public void setOutputPackage(String outputPackage) {
        this.outputPackage = outputPackage;
    }

    public void setSequencesUsed(boolean sequencesUsed) {
        this.sequencesUsed = sequencesUsed;
    }

    public void generate(List<Class> repos) {
        def fn = basePath + "/" + outputPackage.replaceAll("\\.","/") + "/HCCommonRepositoryImpl.java";
        println "Writing " + fn;
        def output = new File(fn);

        output << "package " + outputPackage + ";" << System.lineSeparator()
        output << "" << System.lineSeparator();
        output << "//DO NOT MODIFY, this class was generated by xxx " << System.lineSeparator();
        output << ""<< System.lineSeparator();

        output << "import transgenic.lauterbrunnen.lateral.domain.*;" << System.lineSeparator()
        output << "import static transgenic.lauterbrunnen.lateral.Lateral.inject;"<< System.lineSeparator()
        output << "import " << generatedDomainPackage << ".*;"<< System.lineSeparator()
        output << "import java.util.Collection;" << System.lineSeparator()
        output << ""<< System.lineSeparator();
        
        output << "public class HCCommonRepositoryImpl {" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    private Factory factory = inject(Factory.class, " + diContext + "Context.class);"<< System.lineSeparator() +
                "    private Repository repository = inject(Repository.class, " + diContext + "Context.class);"<< System.lineSeparator() +
                "" << System.lineSeparator() +
                "    public void persistAll(Collection<EntityImpl> persistCollection)  throws PersistenceException{" << System.lineSeparator() +
                "        //Nothing clever for now" << System.lineSeparator() +
                "        //Entities here could be a variety of types" << System.lineSeparator() +
                "        for(EntityImpl impl: persistCollection) {" << System.lineSeparator() +
                "            CRUDRepository repo = repository.getRepositoryForClass(impl.getClass());" << System.lineSeparator() +
                "            repo.persist(impl);" << System.lineSeparator() +
                "        }" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    //need to catch optimistic locking exceptions and concatenate and then through persistence exception" << System.lineSeparator() +
                "    public void updateAll(Collection<EntityImpl> updateCollection) throws PersistenceException {" << System.lineSeparator() +
                "        OptimisticLockingException first = null, last = null;" << System.lineSeparator() +
                "" << System.lineSeparator() + 
                "        for(EntityImpl impl: updateCollection) {" << System.lineSeparator() +
                "            CRUDRepository repo = repository.getRepositoryForClass(impl.getClass());" << System.lineSeparator() +
                "            try {" << System.lineSeparator() +
                "                repo.update(impl);" << System.lineSeparator() +
                "            } catch(OptimisticLockingException ole) {" << System.lineSeparator() +
                "                if (first==null) first = ole;" << System.lineSeparator() +
                "                if (last==null) last = first;" << System.lineSeparator() +
                "                last.add(ole);" << System.lineSeparator() +
                "                last=ole;" << System.lineSeparator() +
                "            }" << System.lineSeparator() +
                "            catch(PersistenceException e) {" << System.lineSeparator() +
                "                //in this case throw" << System.lineSeparator() +
                "                throw e;" << System.lineSeparator() +
                "            }" << System.lineSeparator() +
                "        }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "        if (first!=null) throw first;" << System.lineSeparator() +
                "    }" << System.lineSeparator() << System.lineSeparator();
                
//                "    public void updateAll(Collection<EntityImpl> updateCollection) {" << System.lineSeparator() +
//                "        for(EntityImpl impl: updateCollection) {" << System.lineSeparator() +
//                "            CRUDRepository repo = Factory.getRepositoryForClass(impl.getClass());" << System.lineSeparator() +
//                "            repo.update(impl);" << System.lineSeparator() +
//                "        }" << System.lineSeparator() +
//                "    }" << System.lineSeparator() +

                //Add in the following function but only if the internal _Sequence class is used

                if (sequencesUsed) {
                    output << "    protected long incrementSequence(String name) throws PersistenceException{" << System.lineSeparator() +
                            "        _Sequence sequence = repository.retrieve(_Sequence.class, name);" << System.lineSeparator() +
                            "" << System.lineSeparator() +
                            "        //If there is no sequence, create a new one" << System.lineSeparator() +
                            "        if (sequence==null) {" << System.lineSeparator() +
                            "            sequence = factory.create(_Sequence.class);" << System.lineSeparator() +
                            "            sequence.setName(name);" << System.lineSeparator() +
                            "            sequence.setValue(0);" << System.lineSeparator() +
                            "            repository.persist(sequence);" << System.lineSeparator() +
                            "        }" << System.lineSeparator() +
                            "" << System.lineSeparator() +
                            "        int retryCount = 0;" << System.lineSeparator() +
                            "        long value=0;" << System.lineSeparator() +
                            "        do {" << System.lineSeparator() +
                            "            try {" << System.lineSeparator() +
                            "                value = sequence.getValue()+1;" << System.lineSeparator() +
                            "                sequence.setValue(value);" << System.lineSeparator() +
                            "                repository.update(sequence);" << System.lineSeparator() +
                            "            } catch (PersistenceException e) {" << System.lineSeparator() +
                            "                if (e instanceof OptimisticLockingException) {" << System.lineSeparator() +
                            "                    //retry a few times" << System.lineSeparator() +
                            "                    retryCount++;" << System.lineSeparator() +
                            "                    if (retryCount>=3) throw e;" << System.lineSeparator() +
                            "                }" << System.lineSeparator() +
                            "                else throw e;" << System.lineSeparator() +
                            "            }" << System.lineSeparator() +
                            "        }while(retryCount>0 && retryCount<3);" << System.lineSeparator() +
                            "        return value;" << System.lineSeparator() +
                            "    }" << System.lineSeparator()
                }
                
                output << "}"<< System.lineSeparator();
    }
}

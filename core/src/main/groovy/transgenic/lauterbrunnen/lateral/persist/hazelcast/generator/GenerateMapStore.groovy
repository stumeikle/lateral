package transgenic.lauterbrunnen.lateral.persist.hazelcast.generator

/**
 * Created by stumeikle on 06/11/16.
 */
class GenerateMapStore {

    protected String basePath;
    protected String implPackage;
    protected String cachePackage;
    protected String entityPackage;

    String getBasePath() {
        return basePath
    }

    void setBasePath(String basePath) {
        this.basePath = basePath
    }

    String getImplPackage() {
        return implPackage
    }

    void setImplPackage(String implPackage) {
        this.implPackage = implPackage
    }

    String getCachePackage() {
        return cachePackage
    }

    void setCachePackage(String cachePackage) {
        this.cachePackage = cachePackage
    }

    void setEntityPackage(String entityPackage) {
        this.entityPackage = entityPackage
    }

    public void generate(Class proto) {
        def fn = basePath + "/" + cachePackage.replaceAll("\\.","/") + "/" + proto.getSimpleName() + "MapStore.java";
        println "Writing " + fn;
        def output = new File(fn);

        String implPersister = proto.getSimpleName() + "ImplPersister";
        String implRetriever = proto.getSimpleName() + "ImplRetriever";
        String impl = proto.getSimpleName() + "Impl";
        String entityTransformer = proto.getSimpleName() + "EntityTransformer";
        String entity = proto.getSimpleName() + "Entity";
        String implLC = impl.substring(0,1).toLowerCase() + impl.substring(1);
        String entityLC = entity.substring(0,1).toLowerCase() + entity.substring(1);

        output << "package " + cachePackage + ";" << System.lineSeparator()
        output << "" << System.lineSeparator();
        output << "//DO NOT MODIFY, this class was generated by xxx " << System.lineSeparator();
        output << ""<< System.lineSeparator();
        
        output << "import com.hazelcast.map.MapStore;" << System.lineSeparator() +
                "import org.apache.commons.logging.Log;" << System.lineSeparator() +
                "import org.apache.commons.logging.LogFactory;" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "import java.util.Collection;" << System.lineSeparator() +
                "import java.util.HashMap;" << System.lineSeparator() +
                "import java.util.Map;"<< System.lineSeparator()
        
        output << "" << System.lineSeparator() +
                "/**" << System.lineSeparator() +
                " * Created by stumeikle on 03/11/16." << System.lineSeparator() +
                " * Object 1 is the key type and object 2 is the object type" << System.lineSeparator() +
                " * Only using this for synchronous storage for the time being" << System.lineSeparator() +
                " * Class is primarily a proxy to the persist and retrieve objects" << System.lineSeparator() +
                " */" << System.lineSeparator() +
                "public class " << proto.getSimpleName() << "MapStore  implements MapStore<Object, Object> {" << System.lineSeparator()
        
        output << "    private static final Log LOG = LogFactory.getLog(" << proto.getSimpleName() << "MapStore.class);" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    //These could be injected later" << System.lineSeparator() +
                "    private final " << implPersister << " persister = new " << implPersister << "();" << System.lineSeparator() +
                "    private final " << implRetriever << " retriever = new " << implRetriever << "();" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public Object load(Object object) {" << System.lineSeparator() +
                "        return retriever.retrieve(object);" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public Map<Object, Object> loadAll(Collection<Object> collection) {" << System.lineSeparator() +
                "        //could pass this on to the retriever to more intelligently retrieve" << System.lineSeparator() +
                "        //TBD" << System.lineSeparator() +
                "        HashMap<Object, Object>     retval = new HashMap<>();" << System.lineSeparator() +
                "        for(Object key: collection) {" << System.lineSeparator() +
                "            retval.put(key, load(key));" << System.lineSeparator() +
                "        }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "        return retval;" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    public Iterable<Object> loadAllKeys() {" << System.lineSeparator() +
                "        return null;" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public void store(Object key, Object impl) {" << System.lineSeparator() +
                "        LOG.debug(\"Storing object \" + key);" << System.lineSeparator() +
                "        persister.persist(impl);" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public void storeAll(Map<Object, Object> map) {" << System.lineSeparator() +
                "        //could pass this on to the persister to more intelligently store" << System.lineSeparator() +
                "        //TBD" << System.lineSeparator() +
                "        LOG.debug(\"Store all called\");" << System.lineSeparator() +
                "        for(Object key: map.keySet()) {" << System.lineSeparator() +
                "            store(key,map.get(key));" << System.lineSeparator() +
                "        }" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public void delete(Object o) {" << System.lineSeparator() +
                "        LOG.debug(\"Deleting object:\" +o);" << System.lineSeparator() +
                "        persister.remove(o);" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public void deleteAll(Collection<Object> collection) {" << System.lineSeparator() +
                "        for(Object object: collection) {" << System.lineSeparator() +
                "            delete(object);" << System.lineSeparator() +
                "        }" << System.lineSeparator() +
                "    }" << System.lineSeparator()
        output << "}" << System.lineSeparator()
        
    }
}

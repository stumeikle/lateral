package transgenic.lauterbrunnen.lateral.domain.generator

import transgenic.lauterbrunnen.lateral.domain.UniqueId

import java.lang.reflect.Field

/**
 * Created by stumeikle on 04/06/16.
 *
 * 20190812 This generator generates the class-specific repository, not the over-arching controlling repository
 */
class GenerateRepo extends GenerateRef{

    String protoPackage;

    public void generateRepo(Class proto) {

        //20200918 need to consider subpackages now
        //This means we need to change outputPackage to include the extras
        String classOutputPackage = outputPackage + proto.getName().substring(protoPackage.length());
        classOutputPackage = classOutputPackage.replace("." + proto.getSimpleName(),"");

        def fn = basePath + "/" + classOutputPackage.replaceAll("\\.","/") + "/" + proto.getSimpleName() + "Repository.java";
        println "Writing " + fn;
        def output = new File(fn);

        //Check the parent directory exists
        def parentDir = new File(output.getParent());
        if (!parentDir.exists()) {
            parentDir.mkdirs();
        }

        output << "package " + classOutputPackage + ";" << System.lineSeparator()
        output << "" << System.lineSeparator();
        output << "//DO NOT MODIFY, this class was generated by xxx " << System.lineSeparator();
        output << ""<< System.lineSeparator();
        output << "import transgenic.lauterbrunnen.lateral.domain.CRUDRepository;" << System.lineSeparator()
        output << ""<< System.lineSeparator()

        //we need the idfield
        List<Field> allFields = getAllFields(proto);
        setIdField(allFields);
        String idfieldType = (idField!=null?swapType(idField.getGenericType()) : UniqueId.class.getName() );
        //and more
        if (idField!=null && idField.getType().isPrimitive()) {
            idfieldType = swapPrimitiveForNon(idField.getType());
        }

        output << "public interface " + proto.getSimpleName() + "Repository extends CRUDRepository<" + proto.getSimpleName() + "Impl," <<
                idfieldType << "> {"<< System.lineSeparator()
        output << "}" << System.lineSeparator()
    }
}

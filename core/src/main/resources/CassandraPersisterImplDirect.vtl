package ${cachePackage};

import ${domainGeneratedPackage}.${implName};
import ${domainGeneratedPackage}.${diContext}Context;
import ${entityPackage}.${entityName}Entity;
import ${entityPackage}.${entityName}EntityTransformer;
import transgenic.lauterbrunnen.lateral.persist.CassandraManager;
import transgenic.lauterbrunnen.lateral.di.DefaultImpl;
import transgenic.lauterbrunnen.lateral.di.DIContext;

//DO NOT MODIFY, this class was generated by xxx

import java.util.Collection;
import java.util.Map;

import static transgenic.lauterbrunnen.lateral.Lateral.inject;

@DefaultImpl
@DIContext(${diContext}Context.class)
public class ${protoSimpleName}PersisterImplDirect implements ${protoSimpleName}Persister {
    private CassandraManager cassandraManager=inject(CassandraManager.class, ${diContext}Context.class);

    @Override
    //This method called from hc map store for both persists AND updates :(
    public void persist(Object object) {
        if (!(object instanceof ${implName})) return;

        ${implName} ${implNameFirstLower} = (${implName})object;
        ${entityName}Entity ${entityNameFirstLower}Entity = new ${entityName}Entity();
        ${entityName}EntityTransformer.transform( ${entityNameFirstLower}Entity, ${implNameFirstLower} );

        cassandraManager.save(${entityNameFirstLower}Entity);
    }

    @Override
    public void persistAll(Map<Object, Object> map) {
        //agreed non ideal TODO
        for(Object o: map.values()) {
            persist(o);
        }
    }

    //This method never called. HC map store does not differentiate between store and update
    @Override
    public void update(Object object) {
        if (!(object instanceof ${implName})) return;

        ${implName} ${implNameFirstLower} = (${implName})object;
        ${entityName}Entity ${entityNameFirstLower}Entity = new ${entityName}Entity();
        ${entityName}EntityTransformer.transform( ${entityNameFirstLower}Entity, ${implNameFirstLower} );

        cassandraManager.save(${entityNameFirstLower}Entity);
    }

    @Override
    public void remove(Object object) {
        if (!(object instanceof ${implName})) return;
        ${implName} ${implNameFirstLower} = (${implName})object;
        //convert repository key to db key if needed
        Object      key=${implNameFirstLower}.getRepositoryId();
        Object      dbKey=${convertCacheKeyToDbKey};

        cassandraManager.delete(dbKey, ${entityName}Entity.class);
    }

    private void removeByKey(Object key) {
        //convert repository key to db key if needed
        Object      dbKey=${convertCacheKeyToDbKey};

        cassandraManager.delete(dbKey, ${entityName}Entity.class);
    }

    @Override
    public void removeAll(Collection<Object> collection) {
        //agreed non ideal TODO
        for(Object o: collection) {
            removeByKey(o);
        }
    }
}

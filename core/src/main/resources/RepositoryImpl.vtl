package ${outputPackage};

//DO NOT MODIFY, this class was generated by xxx

import com.hazelcast.map.IMap;
import com.hazelcast.flakeidgen.FlakeIdGenerator;
import com.hazelcast.query.impl.predicates.SqlPredicate;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import ${inputPackage}.${protoName}Impl;
import ${inputPackage}.${protoName}Repository;
import transgenic.lauterbrunnen.lateral.domain.PersistenceException;
import transgenic.lauterbrunnen.lateral.domain.OptimisticLockingException;

public class HC${protoName}RepositoryImpl extends HCCommonRepositoryImpl implements ${protoName}Repository {

    private final IMap   cache;
    private final FlakeIdGenerator idGenerator; //cluster wide unique ids

    public HC${protoName}RepositoryImpl(IMap cache, FlakeIdGenerator idGenerator) {
        this.cache = cache;
        this.idGenerator = idGenerator;
    }

    @Override
    public void create(${protoName}Impl ${lcProtoName}Impl) throws PersistenceException {
        cache.put(${lcProtoName}Impl.getRepositoryId(), ${lcProtoName}Impl);
    }

    @Override
    public void persist(${protoName}Impl ${lcProtoName}Impl) throws PersistenceException{
        create(${lcProtoName}Impl);
    }

    @Override
    public ${protoName}Impl retrieve(${repoIdType} id) {
        ${protoName}Impl retval = (${protoName}Impl) cache.get(id);
        return retval;
    }

    @Override
    public void delete(${repoIdType} id) {
        cache.remove(id);
    }

    @Override
    public void update(${protoName}Impl ${lcProtoName}Impl) throws PersistenceException {
        //we need a unique identifier for the update
        //do that the dbdumpers can agree which updates have been persisted
        ${lcProtoName}Impl.setUpdateId(idGenerator.newId());

#if( $optimisticLocking)
        ${protoName}Impl previous = retrieve(${lcProtoName}Impl.getRepositoryId());
        if (! cache.replace(${lcProtoName}Impl.getRepositoryId(), previous, ${lcProtoName}Impl)) { //returns true/false
            throw new OptimisticLockingException(${protoName}Impl.class, ${lcProtoName}Impl.getRepositoryId());
        }
#else
        cache.put(${lcProtoName}Impl.getRepositoryId(), ${lcProtoName}Impl);
#end
    }

    @Override
    public Collection<${protoName}Impl> retrieveAll() {
        List<${protoName}Impl> all = new ArrayList<>(cache.size());

        for(Object id : cache.keySet()) {
            all.add((${protoName}Impl)cache.get(id));
        }
        return all;
    }

    @Override
    public Collection<${protoName}Impl> search(String predicate) {
        Collection<${protoName}Impl> results = cache.values( new SqlPredicate( predicate) );
        return results;
    }

    @Override
    public Collection<${repoIdType}> retrieveKeys() {
        return cache.keySet();
    }
}

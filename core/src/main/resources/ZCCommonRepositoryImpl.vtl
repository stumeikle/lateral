package ${outputPackage};

//DO NOT MODIFY, this class was generated by xxx

import transgenic.lauterbrunnen.lateral.domain.*;
import static transgenic.lauterbrunnen.lateral.Lateral.inject;
#if ( $sequencesUsed )
import ${inputPackage}._Sequence;
#end
import ${inputPackage}.${diContext}Context;
import java.util.Collection;

public class ZCCommonRepositoryImpl {

    private Factory factory = inject(Factory.class, ${diContext}Context.class);
    private Repository repository = inject(Repository.class, ${diContext}Context.class);

    public void persistAll(Collection<EntityImpl> persistCollection)  throws PersistenceException {
        //Nothing clever for now
        //Entities here could be a variety of types
        for(EntityImpl impl: persistCollection) {
            CRUDRepository repo = repository.getRepositoryForClass(impl.getClass());
            repo.persist(impl);
        }
    }

    //need to catch optimistic locking exceptions and concatenate and then through persistence exception
    public void updateAll(Collection<EntityImpl> updateCollection) throws PersistenceException {
        OptimisticLockingException first = null, last = null;

        for(EntityImpl impl: updateCollection) {
            CRUDRepository repo = repository.getRepositoryForClass(impl.getClass());
            try {
                repo.update(impl);
            } catch(OptimisticLockingException ole) {
                if (first==null) first = ole;
                if (last==null) last = first;
                last.add(ole);
                last=ole;
            }
            catch(PersistenceException e) {
                //in this case throw
                throw e;
            }
        }

        if (first!=null) throw first;
    }

#if ( $sequencesUsed )
    protected long incrementSequence(String name) throws PersistenceException{
        _Sequence sequence = repository.retrieve(_Sequence.class, name);

        //If there is no sequence, create a new one
        if (sequence==null) {
            sequence = factory.create(_Sequence.class);
            sequence.setName(name);
            sequence.setValue(0);
            repository.persist(sequence);
        }

        int retryCount = 0;
        long value=0;
        do {
            try {
                value = sequence.getValue()+1;
                sequence.setValue(value);
                repository.update(sequence);
            } catch (PersistenceException e) {
                if (e instanceof OptimisticLockingException) {
                    //retry a few times
                    retryCount++;
                    if (retryCount>=3) throw e;
                }
                else throw e;
            }
        }while(retryCount>0 && retryCount<3);
        return value;
    }
#end
}

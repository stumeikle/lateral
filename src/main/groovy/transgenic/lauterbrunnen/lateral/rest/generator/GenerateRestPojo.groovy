package transgenic.lauterbrunnen.lateral.rest.generator

import transgenic.lauterbrunnen.lateral.domain.RepositoryId

import java.lang.annotation.Annotation
import java.lang.reflect.Field
import java.lang.reflect.ParameterizedType
import java.lang.reflect.Type
import java.util.function.Consumer

/**
 * Created by stumeikle on 10/11/16.
 */
class GenerateRestPojo {

    protected String prototypePackage;
    protected String outputPackage;
    protected String domainGeneratedPackage;
    protected List<Class> prototypeClasses;
    protected String basePath;
    private Map<String, Class> classMap = new HashMap<>();
    protected Properties properties;
    protected Field idField = null;

    public void setPrototypePackage(String prototypePackage) {
        this.prototypePackage = prototypePackage;
    }
    public void setOutputPackage(String outputPackage) {
        this.outputPackage = outputPackage;
    }
    public void setPrototypeClasses(List<Class> classes) {
        this.prototypeClasses = classes;
        for(Class clazz: classes) {
            classMap.put(clazz.getName(), clazz);
        }
    }
    public void setBasePath(String basePath) {
        this.basePath = basePath;
    }
    public void setProperties(Properties properties) {
        this.properties = properties;
    }
    public void setDomainGeneratedPackage(String dgp) {
        this.domainGeneratedPackage = dgp;
    }

    def void generate(Class proto) {

        //what's the version?
        //default to the same as the rest api version
        //else get from generate.properties

        String api_version = properties.getProperty("rest.version");
        String pojo_version = properties.getProperty("rest.pojo." + proto.getSimpleName().toLowerCase() + ".version");
        if (api_version == null) api_version = "1";
        if (pojo_version == null) pojo_version = api_version;

        pojo_version = pojo_version.replaceAll("\\.", "_");

        def className = proto.getSimpleName() + "_" + pojo_version;
        def fn = basePath + "/" + outputPackage.replaceAll("\\.", "/") + "/" + className + ".java";
        println "Writing " + fn;
        def output = new File(fn);

        output << "package " + outputPackage + ";" << System.lineSeparator()
        output << "" << System.lineSeparator();
        output << "//DO NOT MODIFY, this class was generated by xxx " << System.lineSeparator();
        output << "" << System.lineSeparator();
        output << "import transgenic.lauterbrunnen.lateral.domain.UniqueId;" << System.lineSeparator();
        output << "import " << domainGeneratedPackage << ".*;" << System.lineSeparator();
        output << "" << System.lineSeparator()
        output << "public class " << className << " {" << System.lineSeparator();
        output << System.lineSeparator();

        List<Field> allFields = getAllFields(proto);

        //copied from GenerateImpl, if i'm honest :-)
        List<Field> directProtoFields = new ArrayList<>();
        List<Field> collectionFields = new ArrayList<>();
        for (Field field : allFields) {

            Annotation[] notes = field.getAnnotations();
            for (Annotation note : notes) {
                if (note.annotationType().getName().equals(RepositoryId.class.getName())) {
                    idField = field;
                }
            }

            if (classMap.containsKey(field.getType().getTypeName())) {
                directProtoFields.add(field);
            }

            //check if the type is referenced as a generic
            boolean found = false;
            iterateGenerics(field.getGenericType(), new Consumer<Type>() {
                void accept(Type t) {
                    String name = t.getTypeName();
                    if (t instanceof ParameterizedType) {
                        ParameterizedType pt = (ParameterizedType) t;
                        name = pt.getRawType().getTypeName();
                    }

                    if (classMap.containsKey(name)) {
                        found = true;
                    }
                }
            });

            if (found) {
                //check what the type is, if its a list or a map thats fine
                Class<?> typeClass = field.getType();
                boolean ok = false;
                if (typeClass.getName().equals("java.util.List") || typeClass.getName().equals("java.util.Map")) {
                    ok = true;
                    collectionFields.add(field);
                } else {
                    for (Class<?> iface : typeClass.getInterfaces()) {
                        if (iface.getName().equals("java.util.List") || iface.getName().equals("java.util.Map")) {
                            ok = true;
                            collectionFields.add(field);
                            break;
                        }
                    }
                }
                if (!ok) {
                    throw new Exception("Entity type mentioned in generics, but I don't know how to traverse that type.");
                }
            }

            output << "    private " + swapType(field.getGenericType()) + " " + field.getName() + ";" << System.lineSeparator()
        }

        //If no id field is annotated , create one
        if (idField == null) {
            output << "    private String repositoryId;" << System.lineSeparator();
        } else {
            //nothing in this case
        }

        output << System.lineSeparator();

        //generate the isPresent booleans:
        generateIsPresent(output, allFields);

        //generate the getters and setters
        generateGettersAndSetters(output, proto, allFields);

        generateCreateUpdateImpl(output, proto, allFields);

        generateCreateFromEntity(output, proto, allFields);

        output << "}" << System.lineSeparator();
    }

    def generateIsPresent(def output, def allFields) {
        for(Field field: allFields) {
            output << "    private boolean isPresent" << capitalizeFirst(field.getName()) << " = false;" << System.lineSeparator();
        }
        if (idField==null) {
            output << "    private boolean isPresentRepositoryId = false;" << System.lineSeparator();
        }
    }

    protected void generateGettersAndSetters(def output, Class proto, List<Field> allFields) {
        for(Field field : allFields) {

            if (field.getName().startsWith("is")) {
                String shortName = field.getName().replace("is", "");
                String shortNameFirstLower = shortName.substring(0,1).toLowerCase() + shortName.substring(1);

                output << ""<< System.lineSeparator();
                output << "    public " + swapType(field.getGenericType()) + " " + field.getName() + "() {"<< System.lineSeparator();
                output << "        return this." + field.getName() + ";"<< System.lineSeparator();
                output << "    }"<< System.lineSeparator();

                output << ""<< System.lineSeparator();
                output << "    public void set" + shortName + "(" + swapType(field.getGenericType()) + " " + shortNameFirstLower + ") {"<< System.lineSeparator();
                output << "        this." + field.getName() + " = " + shortNameFirstLower + ";"<< System.lineSeparator();
                output << "        this.isPresent" + capitalizeFirst(field.getName()) + " =true;" << System.lineSeparator();
                output << "    }"<< System.lineSeparator();


            } else {

                output << ""<< System.lineSeparator();
                output << "    public " + swapType(field.getGenericType()) + " get" + capitalizeFirst(field.getName()) + "() {"<< System.lineSeparator()
                output << "        return this." + field.getName() + ";"<< System.lineSeparator()
                output << "    }"<< System.lineSeparator()

                output << ""<< System.lineSeparator()
                output << "    public void set" + capitalizeFirst(field.getName()) + "(" + swapType(field.getGenericType()) + " " + field.getName() + ") {"<< System.lineSeparator()
                output << "        this." + field.getName() + " = " + field.getName() + ";"<< System.lineSeparator()
                output << "        this.isPresent" + capitalizeFirst(field.getName()) + " =true;" << System.lineSeparator();
                output << "    }"<< System.lineSeparator()
            }
        }

        if (idField==null) {
            output << ""<< System.lineSeparator();
            output << "    public String getRepositoryId() {"<< System.lineSeparator()
            output << "        return this.repositoryId;" << System.lineSeparator()
            output << "    }"<< System.lineSeparator()

            output << ""<< System.lineSeparator()
            output << "    public void setRepositoryId( String repositoryId ) {"<< System.lineSeparator()
            output << "        this.repositoryId=repositoryId;"<< System.lineSeparator()
            output << "        this.isPresentRepositoryId = true;" << System.lineSeparator();
            output << "    }"<< System.lineSeparator()
        }
    }

    protected void generateCreateUpdateImpl(def output, Class proto, List<Field> allFields) {

        output << ""<< System.lineSeparator();
        output << "    public " << proto.getSimpleName() << "Impl createImpl() {" << System.lineSeparator();
        output << ""<< System.lineSeparator();
        output << "        " << proto.getSimpleName() << "Impl retval = new " << proto.getSimpleName() << "Impl();" << System.lineSeparator();

        for (Field field : allFields) {

            //need to test if the field is a domain object
            output << "        if (isPresent" << capitalizeFirst(field.getName()) << ") retval.set" << capitalizeFirst(field.getName()) <<
                    "("

            String typename= field.getType().getTypeName();
            if (classMap.containsKey(typename)) {
                output << field.getName() << ".createImpl());" << System.lineSeparator();
            } else {
                output << field.getName() << ");" << System.lineSeparator();
            }
        }

        //repositoryid
        if (idField==null) {
            output << "        if (isPresentRepositoryId) retval.setRepositoryId(UniqueId.fromString(repositoryId));" << System.lineSeparator();
        }

        output << "        return retval;" << System.lineSeparator();
        output << "    }" << System.lineSeparator();

        output << ""<< System.lineSeparator();
        output << "    public " << proto.getSimpleName() << "Impl updateImpl( " << proto.getSimpleName() << "Impl basis ) {" << System.lineSeparator();
        output << ""<< System.lineSeparator();
        output << "        " << proto.getSimpleName() << "Impl retval = basis;" << System.lineSeparator();
        for (Field field : allFields) {

            //need to test if the field is a domain object
            output << "        if (isPresent" << capitalizeFirst(field.getName()) << ") retval.set" << capitalizeFirst(field.getName()) <<
                    "("

            String typename= field.getType().getTypeName();
            if (classMap.containsKey(typename)) {
                output << field.getName() << ".createImpl());" << System.lineSeparator();
            } else {
                output << field.getName() << ");" << System.lineSeparator();
            }
        }

        //repositoryid
        if (idField==null) {
            output << "        if (isPresentRepositoryId) retval.setRepositoryId(UniqueId.fromString(repositoryId));" << System.lineSeparator();
        }

        output << "        return retval;" << System.lineSeparator();
        output << "    }" << System.lineSeparator();

    }

    def generateCreateFromEntity(def output, Class proto, List<Field> allFields) {
        output << ""<< System.lineSeparator();

        String restEntityName = getClassName(proto.getSimpleName());

        output << "    public static " << restEntityName << " createFrom" << proto.getSimpleName() << "( " <<
                proto.getSimpleName() << " " << uncapitalizeFirst(proto.getSimpleName()) << ") {" << System.lineSeparator();
        output << ""<< System.lineSeparator();
        output << "        " << restEntityName << " retval = new " << restEntityName << "();" << System.lineSeparator();

        for (Field field : allFields) {

            //need to test if the field is a domain object


            String typename= field.getType().getTypeName();
            if (classMap.containsKey(typename)) {
                output << "        retval.set" << capitalizeFirst(field.getName()) << "( ";

                //need the type of the field
                String otherRest = getClassName(field.getType().getSimpleName());
                 output << otherRest << ".createFrom" << field.getType().getSimpleName() << "(" <<
                        uncapitalizeFirst(proto.getSimpleName()) << ".get" << capitalizeFirst(field.getName()) << "()));" << System.lineSeparator()
            } else {
                output << "        retval.set" << capitalizeFirst(field.getName()) << "( " <<
                        uncapitalizeFirst(proto.getSimpleName()) << ".get" << capitalizeFirst(field.getName()) << "());" << System.lineSeparator()
            }

        }

        //repositoryid
        if (idField==null) {

            //retval.setRepositoryId(((GarageImpl)garage).getRepositoryId().toString());
            output << "        retval.setRepositoryId(((" << proto.getSimpleName() << "Impl)" <<
                    uncapitalizeFirst(proto.getSimpleName()) << ").getRepositoryId().toString());" << System.lineSeparator()
        }

        output << "        return retval;" << System.lineSeparator();
        output << "    }" << System.lineSeparator();
    }

    //copied from generate impl
    private String swapTypeName(String name) {
        if (classMap.containsKey(name)) {
            Class c = classMap.get(name);
            return getClassName(c.getSimpleName());
        }
        return name;
    }

    private String capitalizeFirst(String string) {
        return string.substring(0,1).toUpperCase() + string.substring(1);
    }

    private String uncapitalizeFirst(String string) {
        return string.substring(0,1).toLowerCase() + string.substring(1);
    }

    protected String swapType(Type type) {
        if (type instanceof ParameterizedType) {
            ParameterizedType p = (ParameterizedType)type;
            String retval = swapTypeName(p.getRawType().getTypeName());
            retval+="<";
            //then do the parameters
            boolean first =true;
            for(Type t : p.getActualTypeArguments()) {
                if (!first) retval = retval + ",";
                retval = retval + swapType(t);
                first =false;
            }
            retval+=">";
            return retval;
        }
        String retval = swapTypeName(type.getTypeName());
        return retval;
    }

    private void iterateGenerics(Type type, Consumer<Type> classConsumer) {
        if (type instanceof ParameterizedType) {
            ParameterizedType p = (ParameterizedType)type;
            classConsumer.accept(p);
            for(Type t : p.getActualTypeArguments()) {
                classConsumer.accept(t);
                if (t instanceof ParameterizedType)
                { iterateGenerics((ParameterizedType)t, classConsumer); }
            }
        }
    }

    def String getClassName(String entityName) {
        String api_version = properties.getProperty("rest.version");
        String pojo_version = properties.getProperty("rest.pojo." + entityName.toLowerCase() + ".version");
        if (api_version==null) api_version="1";
        if (pojo_version==null) pojo_version=api_version;

        pojo_version=pojo_version.replaceAll("\\.","_");
        return entityName + "_" + pojo_version;
    }

    protected List<Field> getAllFields(Class klass) {
        List<Field> retval = new ArrayList<>();
        Class sc = klass.getSuperclass();

        if (sc!=null) {
            retval.addAll( getAllFields( sc ));
        }

        retval.addAll( klass.getDeclaredFields() );
        return retval;
    }
}

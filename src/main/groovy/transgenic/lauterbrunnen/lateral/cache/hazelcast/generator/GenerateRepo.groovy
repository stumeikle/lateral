package transgenic.lauterbrunnen.lateral.cache.hazelcast.generator

import java.lang.reflect.Field

/**
 * Created by stumeikle on 05/06/16.
 */
class GenerateRepo extends GenerateManager {

    private ClassLoader classLoader;

    public void setClassLoader(ClassLoader classLoader) {
        this.classLoader = classLoader;
    }

    public void generate(Class repo) {

        String repoName = repo.getSimpleName();
        String entityName = repoName.replace("Repository", "");
        String entityNameLc = entityName.substring(0,1).toLowerCase() + entityName.substring(1);

        //We need the type nane for the repositoryId field
        String repositoryIdType=null;

        //hmm.
        Class entityRef = classLoader.loadClass( repo.getName().replace("Repository", "Reference"));
        for( Field f: entityRef.getDeclaredFields()) {
            if ("repositoryId".equals(f.getName())) {
                repositoryIdType = f.getGenericType().getTypeName();
            }
        }


        def fn = basePath + "/" + outputPackage.replaceAll("\\.","/") + "/HC" + repoName + "Impl.java";
        println "Writing " + fn;
        def output = new File(fn);

        output << "package " + outputPackage + ";" << System.lineSeparator()
        output << "" << System.lineSeparator();
        output << "//DO NOT MODIFY, this class was generated by xxx " << System.lineSeparator();
        output << ""<< System.lineSeparator();

        output << "import com.hazelcast.core.IMap;" << System.lineSeparator() +
                "import com.hazelcast.core.IdGenerator;" << System.lineSeparator()

        output << "import java.util.ArrayList;" << System.lineSeparator() +
                "import java.util.Collection;" << System.lineSeparator() +
                "import java.util.List;" << System.lineSeparator()
        output << "import " << inputPackage << "." << entityName << "Impl;" << System.lineSeparator()
        output << "import " << inputPackage << "." << repoName << ";" << System.lineSeparator()
        output << "" << System.lineSeparator()
        output << "public class HC" << repoName << "Impl extends HCCommonRepositoryImpl implements " << repoName << " {" << System.lineSeparator()

        output << "" << System.lineSeparator()
        output << "    private final IMap   cache;" << System.lineSeparator() +
                "    private final IdGenerator idGenerator; //cluster wide unique ids" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    public HC" << repoName << "Impl(IMap cache, IdGenerator idGenerator) {" << System.lineSeparator() +
                "        this.cache = cache;" << System.lineSeparator() +
                "        this.idGenerator = idGenerator;" << System.lineSeparator() +
                "    }" << System.lineSeparator()
        output << "" << System.lineSeparator()

        output << "    @Override" << System.lineSeparator() +
                "    public void create(" << entityName << "Impl " << entityNameLc << "Impl) {" << System.lineSeparator() +
                "        cache.put(" << entityNameLc << "Impl.getRepositoryId(), " << entityNameLc << "Impl);" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public void persist(" << entityName << "Impl " << entityNameLc << "Impl) {" << System.lineSeparator() +
                "        create(" << entityNameLc << "Impl);" << System.lineSeparator() +
                "    }" << System.lineSeparator()

        output << "" << System.lineSeparator()
        output << "    @Override" << System.lineSeparator() +
                "    public " << entityName << "Impl retrieve(" << repositoryIdType << " id) {" << System.lineSeparator() +
                "        " << entityName << "Impl retval = (" << entityName << "Impl) cache.get(id);" << System.lineSeparator() +
                "        return retval;" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public void delete(" << repositoryIdType << " id) {" << System.lineSeparator() +
                "        cache.remove(id);" << System.lineSeparator() +
                "    }" << System.lineSeparator()
        output << System.lineSeparator()
        output << "    @Override" << System.lineSeparator() +
                "    public void update(" << entityName << "Impl " << entityNameLc << "Impl) {" << System.lineSeparator() +
                "        //we need a unique identifier for the update" << System.lineSeparator() +
                "        //do that the dbdumpers can agree which updates have been persisted" << System.lineSeparator() +
                "        " << entityNameLc << "Impl.setUpdateId(idGenerator.newId());" << System.lineSeparator() +
                "        cache.put(" << entityNameLc << "Impl.getRepositoryId(), " << entityNameLc << "Impl);" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public Collection<" << entityName << "Impl> retrieveAll() {" << System.lineSeparator() +
                "        List<" << entityName << "Impl> all = new ArrayList<>(cache.size());" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "        for(Object id : cache.keySet()) {" << System.lineSeparator() +
                "            all.add((" << entityName << "Impl)cache.get(id));" << System.lineSeparator() +
                "        }" << System.lineSeparator() +
                "        return all;" << System.lineSeparator() +
                "    }" << System.lineSeparator()
        output << "}" << System.lineSeparator()
        
    }
}

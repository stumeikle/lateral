package transgenic.lauterbrunnen.lateral.persist.hazelcast.generator

/**
 * Created by stumeikle on 11/06/16.
 */
class GeneratePersister {

    protected String basePath;
    protected String implPackage;
    protected String cachePackage;
    protected String entityPackage;

    String getBasePath() {
        return basePath
    }

    void setBasePath(String basePath) {
        this.basePath = basePath
    }

    String getImplPackage() {
        return implPackage
    }

    void setImplPackage(String implPackage) {
        this.implPackage = implPackage
    }

    String getCachePackage() {
        return cachePackage
    }

    void setCachePackage(String cachePackage) {
        this.cachePackage = cachePackage
    }

    void setEntityPackage(String entityPackage) {
        this.entityPackage = entityPackage
    }

    public void generate(Class proto) {
        def fn = basePath + "/" + cachePackage.replaceAll("\\.","/") + "/" + proto.getSimpleName() + "PersisterImplDirect.java";
        println "Writing " + fn;
        def output = new File(fn);

        output << "package " + cachePackage + ";" << System.lineSeparator()
        output << "" << System.lineSeparator();
        output << "//DO NOT MODIFY, this class was generated by xxx " << System.lineSeparator();
        output << ""<< System.lineSeparator();

        output << "import " << implPackage << ".*;" << System.lineSeparator();
        output << "import " << entityPackage << "." << proto.getSimpleName() << "Entity;" << System.lineSeparator()
        output << "import " << entityPackage << "." << proto.getSimpleName() << "EntityTransformer;" << System.lineSeparator()
        output << "import transgenic.lauterbrunnen.lateral.persist.Persister;" << System.lineSeparator()+
                  "import transgenic.lauterbrunnen.lateral.persist.TransactionManager;"<< System.lineSeparator()
        output << "import java.util.Collection;" << System.lineSeparator +
                "import java.util.Map;" << System.lineSeparator
        output << "" << System.lineSeparator();
        
        String implPersister = proto.getSimpleName() + "PersisterImplDirect";
        String impl = proto.getSimpleName() + "Impl";
        String entityTransformer = proto.getSimpleName() + "EntityTransformer";
        String entity = proto.getSimpleName() + "Entity";
        String implLC = impl.substring(0,1).toLowerCase() + impl.substring(1);
        String entityLC = entity.substring(0,1).toLowerCase() + entity.substring(1);
        
        output << "public class " << implPersister << " implements " << proto.getSimpleName() << "Persister {" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public void persist(Object object) {" << System.lineSeparator() +
                "        if (!(object instanceof " << impl << ")) return;" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "        " << impl << " " << implLC << " = (" << impl << ")object;" << System.lineSeparator() +
                "        " << entity << " " << entityLC << " = new " << entity << "();" << System.lineSeparator() +
                "        " << entityTransformer << ".transform( " << entityLC << ", " << implLC << " );" << System.lineSeparator() +
                "        TransactionManager.INSTANCE.runInTransactionalContext(em -> {" << System.lineSeparator() +
                "            em.persist(" << entityLC << ");" << System.lineSeparator() +
                "        });" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "    @Override" << System.lineSeparator +
                "    public void persistAll(Map<Object, Object> map) {" << System.lineSeparator +
                "        //agreed non ideal TODO" << System.lineSeparator +
                "        for(Object o: map.values()) {" << System.lineSeparator +
                "            persist(o);" << System.lineSeparator +
                "        }" << System.lineSeparator +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public void update(Object object) {" << System.lineSeparator() +
                "        if (!(object instanceof " << impl << ")) return;" << System.lineSeparator() +
                "        " << impl << " " << implLC << " = (" << impl << ")object;" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "        TransactionManager.INSTANCE.runInTransactionalContext(em -> {" << System.lineSeparator() +
                "            " << entity << " " << entityLC << " = em.find( " << entity << ".class, " << implLC << ".getRepositoryId() );" << System.lineSeparator() +
                "            " << entityTransformer << ".transform(" << entityLC << ", " << implLC << ");" << System.lineSeparator() +
                "        });" << System.lineSeparator() +
                "    }" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "    @Override" << System.lineSeparator() +
                "    public void remove(Object object) {" << System.lineSeparator() +
                "        if (!(object instanceof " << impl << ")) return;" << System.lineSeparator() +
                "        " << impl << " " << implLC << " = (" << impl << ")object;" << System.lineSeparator() +
                "" << System.lineSeparator() +
                "        TransactionManager.INSTANCE.runInTransactionalContext(em -> {" << System.lineSeparator() +
                "            " << entity << " " << entityLC << " = em.find( " << entity << ".class, " << implLC << ".getRepositoryId() );" << System.lineSeparator() +
                "            em.remove(" << entityLC << ");" << System.lineSeparator() +
                "        });" << System.lineSeparator() +
                "    }"<< System.lineSeparator()<< System.lineSeparator() +
                "    private void removeByKey(Object key) {" << System.lineSeparator +
                "        TransactionManager.INSTANCE.runInTransactionalContext(em -> {" << System.lineSeparator +
                "            " << entity << " " << entityLC << " = em.find( " << entity << ".class, key );" << System.lineSeparator +
                "            em.remove(" << entityLC << ");" << System.lineSeparator +
                "        });" << System.lineSeparator +
                "    }" << System.lineSeparator +
                "" << System.lineSeparator +
                "    @Override" << System.lineSeparator +
                "    public void removeAll(Collection<Object> collection) {" << System.lineSeparator +
                "        //agreed non ideal TODO" << System.lineSeparator +
                "        for(Object o: collection) {" << System.lineSeparator +
                "            removeByKey(o);" << System.lineSeparator +
                "        }" << System.lineSeparator +
                "    }" << System.lineSeparator
        output << "}" << System.lineSeparator()
    }
}

package transgenic.lauterbrunnen.lateral.domain.generator

import transgenic.lauterbrunnen.lateral.domain.RepositoryId

import java.lang.annotation.Annotation
import java.lang.reflect.Field

/**
 * Created by stumeikle on 04/06/16.
 */
class GenerateIFace extends GenerateImpl{

    public void generateIFace(Class proto) {

        def fn = basePath + "/" + outputPackage.replaceAll("\\.","/") + "/" + proto.getSimpleName() + ".java";
        println "Writing " + fn;
        def output = new File(fn);

        output << "package " + outputPackage + ";" << System.lineSeparator()
        output << "" << System.lineSeparator();
        output << "//DO NOT MODIFY, this class was generated by xxx " << System.lineSeparator();
        output << ""<< System.lineSeparator();

        Class sc = proto.getSuperclass();
        if (sc!=null && sc.getName().contains(prototypePackage)) {
            output << "public interface " + proto.getSimpleName() + " extends " + sc.getSimpleName() +" {" << System.lineSeparator()
        } else {
            output << "public interface " + proto.getSimpleName() << " {" << System.lineSeparator()
        }

        List<Field> fields = Arrays.asList(proto.getDeclaredFields());
        generateGettersAndSetterHeaders(output,proto,fields);

        output << "}"<< System.lineSeparator();
    }

    protected void generateGettersAndSetterHeaders(def output, Class proto, List<Field> allFields) {
        for(Field field : allFields) {

            if (field.getName().startsWith("is")) {
                String shortName = field.getName().replace("is", "");
                String shortNameFirstLower = shortName.substring(0,1).toLowerCase() + shortName.substring(1);

                output << ""<< System.lineSeparator();
                output << "    " + swapType(field.getGenericType()) + " " + field.getName() + "();"<< System.lineSeparator();

                output << ""<< System.lineSeparator();
                output << "    void set" + shortName + "(" + swapType(field.getGenericType()) + " " + shortNameFirstLower + ");"<< System.lineSeparator();

            } else {

                String tn = swapType(field.getGenericType());
                Annotation[] notes = field.getAnnotations();
                for(Annotation note: notes) {
                    if (note.annotationType().getName().equals(RepositoryId.class.getName())) {
                        if (field.getType().isPrimitive()) {
                            tn = swapPrimitiveForNon(field.getType());
                        }
                        break;
                    }
                }

                output << ""<< System.lineSeparator();
                output << "    " + tn + " get" + convertFirstCharToUpper(field.getName()) + "();"<< System.lineSeparator()

                output << ""<< System.lineSeparator()
                output << "    void set" + convertFirstCharToUpper(field.getName()) + "(" + tn + " " + field.getName() + ");"<< System.lineSeparator()
          }
        }
    }
}

package transgenic.lauterbrunnen.lateral.domain.generator

import transgenic.lauterbrunnen.lateral.domain.UniqueId

import java.lang.reflect.Field

/**
 * Created by stumeikle on 04/06/16.
 */
class GenerateFactory extends GenerateRepo {

    public void generateFactory() {
        def fn = basePath + "/" + outputPackage.replaceAll("\\.","/") + "/DefaultFactoryImpl.java";
        println "Writing " + fn;
        def output = new File(fn);

        output << "package " + outputPackage + ";" << System.lineSeparator()
        output << "" << System.lineSeparator();
        output << "//DO NOT MODIFY, this class was generated by xxx " << System.lineSeparator();
        output << ""<< System.lineSeparator();
        output << "import transgenic.lauterbrunnen.lateral.di.DefaultImpl;" << System.lineSeparator()
        output << "import transgenic.lauterbrunnen.lateral.domain.*;" << System.lineSeparator()
        output << "import java.util.Map;" << System.lineSeparator()
        output << "import java.util.HashMap;" << System.lineSeparator()
        output << "import java.util.function.Supplier;" << System.lineSeparator()
        output << "import static transgenic.lauterbrunnen.lateral.di.ApplicationDI.inject;" << System.lineSeparator()
        output << "" << System.lineSeparator()
        output << "@DefaultImpl" << System.lineSeparator()
        output << "public class DefaultFactoryImpl implements FactoryContract {"<< System.lineSeparator()
        output << "" << System.lineSeparator()
        output << "    private final Map<Class, CRUDRepository> class2RepoMap = new HashMap<>();" << System.lineSeparator()
        output << "    private final Map<Class, Supplier>       class2Constructor = new HashMap<>();" << System.lineSeparator()
        output << "" << System.lineSeparator()
        output << "    public DefaultFactoryImpl() {" << System.lineSeparator()

        for(Class proto: prototypeClasses) {
            output << "        class2RepoMap.put(" << proto.getSimpleName() << ".class, inject(" <<
                    proto.getSimpleName() << "Repository.class));" << System.lineSeparator()
            output << "        class2RepoMap.put(" << proto.getSimpleName() << "Impl.class, inject(" <<
                    proto.getSimpleName() << "Repository.class));" << System.lineSeparator()
            output << "        class2Constructor.put(" + proto.getSimpleName() + ".class, DefaultFactoryImpl::create" <<
                    proto.getSimpleName() << ");" << System.lineSeparator()
        }
        output << "    }" << System.lineSeparator()

        output << "" << System.lineSeparator()
        output << "    public CRUDRepository getRepositoryForClass(Class clazz) {" << System.lineSeparator()
        output << "        return class2RepoMap.get(clazz);" << System.lineSeparator()
        output << "    }" << System.lineSeparator()

        output << "" << System.lineSeparator()
        output << "    public <T> T create(Class<T> clazz) {" << System.lineSeparator()
        output << "        Supplier<T> supplier = class2Constructor.get(clazz);" << System.lineSeparator()
        output << "        return (supplier!=null ? supplier.get() : null);" << System.lineSeparator()
        output << "    }" << System.lineSeparator()

        for(Class proto: prototypeClasses) {

            String lc1Name = proto.getSimpleName().substring(0,1).toLowerCase() + proto.getSimpleName().substring(1);

            output << "" << System.lineSeparator()
            output << "    public static " << proto.getSimpleName() << " create" << proto.getSimpleName() << "() {" << System.lineSeparator()
            output << "        " << proto.getSimpleName() << "Impl " << lc1Name << "Impl = new " << proto.getSimpleName() <<
                    "Impl();" << System.lineSeparator();

            //if the idclass is UniqueId we can assign it here
            List<Field> allFields = getAllFields(proto);
            setIdField(allFields);

            if (idField!=null && idField.getType().getName().equals(UniqueId.class.getName())) {
                output << "        " << lc1Name << "Impl.set" << convertFirstCharToUpper(idField.getName()) << "( UniqueId.generate() );" << System.lineSeparator()
            } else {
                if (idField==null) {
                    output << "        " << lc1Name << "Impl.setRepositoryId( UniqueId.generate() );" << System.lineSeparator()
                }
            }

            output << "        return " << lc1Name << "Impl;" << System.lineSeparator()
            output << "    }" << System.lineSeparator()

        }

        output << "}" << System.lineSeparator()
    }
}
